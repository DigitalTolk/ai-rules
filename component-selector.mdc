---
description: 
globs: 
alwaysApply: false
---
# Component Selection Guidelines

This rule provides guidance for automatically selecting the most appropriate DigitalTolk UI components based on common UI patterns, scenarios, and requirements.

## Selection Criteria

When implementing a UI feature, select components based on the following criteria:

1. **Functional Requirements** - What the component needs to do
2. **UI Pattern** - What common UI pattern is being implemented
3. **Data Type** - What kind of data needs to be displayed or collected
4. **User Interaction** - How users will interact with the component
5. **Context** - Where in the application the component will be used

## Common UI Patterns and Component Mappings

### Data Input

| When you need to... | Use this component | Example |
| :--- | :--- | :--- |
| Collect text input | BaseTextField | Username, email, description |
| Collect numeric input | BaseInputNumber | Age, quantity, price |
| Allow selection from predefined options | BaseSelect | Country selection, category filter |
| Allow multiple selections | BaseCheckboxGroup | Feature selection, permission settings |
| Collect binary choice | BaseSwitch, BaseCheckbox | Enable/disable, agree to terms |
| Collect exclusive choice | BaseRadioGroup | Gender selection, plan selection |
| Collect date input | BaseDatePicker | Birth date, start date |
| Collect time input | BaseTimepicker | Meeting time, appointment time |
| Collect location data | BaseLocationField | Address, delivery location |
| Provide text with suggestions | BaseAutoComplete | Search with suggestions, tag input |
| Create rich formatted content | BaseTextEditor | Blog post, comment with formatting |
| Upload files | BaseUpload | Profile picture, document upload |

### Data Display

| When you need to... | Use this component | Example |
| :--- | :--- | :--- |
| Display tabular data | BaseTable | User list, product inventory |
| Display user profile | BaseAvatar | User profile, comment author |
| Show multiple users | BaseAvatarGroup | Team members, participants |
| Indicate status or category | BaseTag | Status labels, categories |
| Display important message | BaseAlert | Success message, warning |
| Show detailed information on hover | BaseTooltip | Help text, additional details |
| Display progress | BaseProgress | Upload progress, completion status |
| Show loading state | BaseSpin, BaseSkeleton | Content loading, data fetching |
| Display empty state | BaseBlankState | Empty list, search with no results |
| Show metrics or stats | BaseMetric | KPIs, dashboard statistics |
| Display code snippets | BaseCode | Code examples, configuration |
| Display chronological events | BaseTimeline | Activity history, process steps |

### Navigation

| When you need to... | Use this component | Example |
| :--- | :--- | :--- |
| Create clickable actions | BaseButton | Submit, cancel, add new |
| Create text links | BaseLink | Navigation links, "learn more" links |
| Create navigation tabs | BaseTabs | Page sections, content categories |
| Build application menu | BaseMenu | Main navigation, settings menu |
| Create dropdown options | BaseDropdown | Actions menu, user menu |
| Show page navigation | BasePagination | Multi-page results, step wizard |
| Create slide-in panel | BaseDrawer | Mobile menu, additional options |

### Layout

| When you need to... | Use this component | Example |
| :--- | :--- | :--- |
| Create responsive grid | BaseGrid | Page layout, dashboard arrangement |
| Create content container | BaseCard | Information group, form section |
| Add spacing between elements | BaseSpace | Consistent spacing, stacked items |
| Create visual separator | BaseDivider | Section separator, content divider |
| Create modal dialog | BaseModal | Confirmation dialog, detailed view |
| Display content in sections | BaseCollapse | FAQ accordion, settings groups |
| Create popup content | BasePopover | Additional information, quick actions |
| Create confirmation popup | BasePopconfirm | Delete confirmation, logout check |

## Decision Tree for Component Selection

### Input Components

```
IF collecting user input:
  IF single line text:
    USE BaseTextField
  ELSE IF multi-line text:
    USE BaseTextField with multiline prop
  ELSE IF numeric value:
    USE BaseInputNumber
  ELSE IF date:
    USE BaseDatePicker
  ELSE IF time:
    USE BaseTimepicker
  ELSE IF location:
    USE BaseLocationField
  ELSE IF selection from options:
    IF single selection:
      IF few options (≤5):
        USE BaseRadioGroup
      ELSE:
        USE BaseSelect
    ELSE IF multiple selection:
      IF few options (≤5):
        USE BaseCheckboxGroup
      ELSE:
        USE BaseSelect with multiple prop
  ELSE IF binary choice:
    IF toggle style preferred:
      USE BaseSwitch
    ELSE:
      USE BaseCheckbox
  ELSE IF rich text:
    USE BaseTextEditor
  ELSE IF file upload:
    USE BaseUpload
```

### Display Components

```
IF displaying data:
  IF structured data with rows and columns:
    USE BaseTable
  ELSE IF user information:
    IF single user:
      USE BaseAvatar
    ELSE IF multiple users:
      USE BaseAvatarGroup
  ELSE IF status or category:
    USE BaseTag
  ELSE IF important message:
    USE BaseAlert
  ELSE IF loading state:
    IF placeholder for content:
      USE BaseSkeleton
    ELSE:
      USE BaseSpin
  ELSE IF empty state:
    USE BaseBlankState
  ELSE IF progress indication:
    USE BaseProgress
  ELSE IF code snippet:
    USE BaseCode
  ELSE IF timeline:
    USE BaseTimeline
  ELSE IF metrics:
    USE BaseMetric
```

## Example Scenarios

### User Registration Form

```jsx
<BaseForm>
  <BaseTextField name="name" label="Full Name" required />
  <BaseTextField name="email" label="Email" type="email" required />
  <BaseTextField name="password" label="Password" type="password" required />
  <BaseSelect name="country" label="Country" options={countryOptions} />
  <BaseCheckbox name="terms" label="I agree to the terms and conditions" required />
  <BaseButton type="primary" htmlType="submit">Register</BaseButton>
</BaseForm>
```

### Product Dashboard

```jsx
<BaseGrid container spacing={3}>
  <BaseGrid item xs={12} md={4}>
    <BaseCard>
      <BaseMetric title="Total Sales" value="$10,258" trend="+12%" />
    </BaseCard>
  </BaseGrid>
  <BaseGrid item xs={12} md={4}>
    <BaseCard>
      <BaseMetric title="Orders" value="356" trend="+8%" />
    </BaseCard>
  </BaseGrid>
  <BaseGrid item xs={12} md={4}>
    <BaseCard>
      <BaseMetric title="Customers" value="1,245" trend="+5%" />
    </BaseCard>
  </BaseGrid>
  <BaseGrid item xs={12}>
    <BaseCard title="Sales Data">
      <BaseChart type="line" data={salesData} />
    </BaseCard>
  </BaseGrid>
</BaseGrid>
```

### User Management Interface

```jsx
<BaseCard title="Users">
  <BaseSpace direction="vertical" size="middle">
    <BaseTextField placeholder="Search users" suffix={<BaseIcon type="search" />} />
    <BaseTable
      columns={userColumns}
      dataSource={userData}
      pagination={{ pageSize: 10 }}
      rowActions={(record) => (
        <BaseSpace>
          <BaseButton type="text" icon={<BaseIcon type="edit" />} onClick={() => editUser(record)}>Edit</BaseButton>
          <BasePopconfirm title="Are you sure you want to delete this user?" onConfirm={() => deleteUser(record.id)}>
            <BaseButton type="text" danger icon={<BaseIcon type="delete" />}>Delete</BaseButton>
          </BasePopconfirm>
        </BaseSpace>
      )}
    />
  </BaseSpace>
</BaseCard>
```

## Automatic Component Selection Rules

The following rules help automatically select components based on context:

1. For any form implementation, always use BaseForm as the container
2. For any button elements, use BaseButton with appropriate type (primary, default, text, link)
3. For any links to other pages, use BaseLink instead of BaseButton
4. For layout structure, use BaseGrid with container and item props
5. For content containers, use BaseCard
6. For spacing between elements, use BaseSpace instead of manual margins
7. For status messages, use BaseAlert with appropriate type (success, info, warning, error)
8. For loading states, use BaseSpin or BaseSkeleton depending on context
9. For confirmation dialogs, use BaseModal or BasePopconfirm based on complexity
10. For dropdown menus, use BaseDropdown with BaseMenu as the overlay

## Notes

- When selecting components, consider the entire user journey and interaction flow
- Choose components that work well together for a consistent user experience
- Follow established UI patterns for familiar user interactions
- Consider performance implications when using complex components
- Ensure all component selections meet accessibility requirements
