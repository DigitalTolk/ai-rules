---
description: Data visualization component for various chart types
globs: components/base/BaseChart.vue
alwaysApply: false
---
# BaseChart Component

## Description
Data visualization component that supports various chart types including doughnut, pie, line, and bar charts. BaseChart is built on Chart.js and provides a simple interface for creating responsive and interactive charts.

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| type | String | "doughnut" | Chart type: "doughnut", "pie", "line", or "bar" |
| data | Object | `{labels: [], datasets: []}` | Chart data with labels and datasets |
| options | Object | `{}` | Chart.js options to override defaults |
| width | String | undefined | Width of the chart container (CSS value) |
| height | String | undefined | Height of the chart container (CSS value) |
| horizontalAlign | String | "start" | Horizontal alignment of the chart ("start", "center", "end") |
| isHalf | Boolean | false | For doughnut/pie charts, shows only half of the circle |

## Events

| Event | Parameters | Description |
|-------|------------|-------------|
| click | event | Emitted when the chart is clicked |
| hover | `{event, element}` | Emitted when the chart is hovered (debounced) |

## Usage Examples

### Basic Doughnut Chart
```vue
<template>
  <BaseChart
    type="doughnut"
    :data="{
      labels: ['Red', 'Blue', 'Yellow'],
      datasets: [{
        label: 'Colors',
        data: [300, 50, 100]
      }]
    }"
    height="300px"
  />
</template>
```

### Line Chart with Custom Options
```vue
<template>
  <BaseChart
    type="line"
    :data="lineChartData"
    :options="lineChartOptions"
    height="400px"
  />
</template>

<script setup>
const lineChartData = {
  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
  datasets: [
    {
      label: 'Sales 2022',
      data: [12, 19, 3, 5, 2, 3],
      borderColor: '#27ae60',
      backgroundColor: 'rgba(39, 174, 96, 0.2)',
      tension: 0.4
    },
    {
      label: 'Sales 2023',
      data: [7, 11, 5, 8, 3, 7],
      borderColor: '#8e44ad',
      backgroundColor: 'rgba(142, 68, 173, 0.2)',
      tension: 0.4
    }
  ]
};

const lineChartOptions = {
  plugins: {
    legend: {
      position: 'top'
    },
    tooltip: {
      mode: 'index'
    }
  },
  scales: {
    y: {
      beginAtZero: true
    }
  }
};
</script>
```

### Bar Chart with Custom Colors
```vue
<template>
  <BaseChart
    type="bar"
    :data="{
      labels: ['Q1', 'Q2', 'Q3', 'Q4'],
      datasets: [{
        label: 'Quarterly Revenue',
        data: [540, 470, 620, 710],
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)',
          'rgba(54, 162, 235, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(75, 192, 192, 0.6)'
        ]
      }]
    }"
    height="350px"
    horizontalAlign="center"
  />
</template>
```

### Half Doughnut Chart
```vue
<template>
  <BaseChart
    type="doughnut"
    :isHalf="true"
    :data="{
      labels: ['Completed', 'In Progress', 'Not Started'],
      datasets: [{
        data: [70, 20, 10],
        backgroundColor: [
          '#27ae60',
          '#f39c12',
          '#e74c3c'
        ]
      }]
    }"
    :options="{
      plugins: {
        legend: {
          position: 'bottom'
        }
      }
    }"
    height="250px"
  />
</template>
```

### Event Handling
```vue
<template>
  <BaseChart
    type="pie"
    :data="pieData"
    @click="handleChartClick"
    @hover="handleChartHover"
  />
</template>

<script setup>
const pieData = {
  labels: ['Category A', 'Category B', 'Category C'],
  datasets: [{
    data: [30, 50, 20]
  }]
};

const handleChartClick = (event) => {
  const points = event.chart.getElementsAtEventForMode(
    event.native,
    'nearest',
    { intersect: true },
    false
  );
  
  if (points.length) {
    const firstPoint = points[0];
    const label = pieData.labels[firstPoint.index];
    const value = pieData.datasets[0].data[firstPoint.index];
    console.log(`Clicked on ${label}: ${value}`);
  }
};

const handleChartHover = ({ event, element }) => {
  if (element.length > 0) {
    console.log('Hovered element:', element[0]);
  }
};
</script>
```

## Component Behavior Notes
- The component automatically generates default colors if none are provided in the dataset
- For doughnut and pie charts, the `isHalf` prop will display only half of the circle (semi-circle)
- All chart types are responsive by default
- The chart container is set to 100% width by default, but can be constrained with the `width` prop
- The component internally uses vue-chart-3 which is a Vue 3 wrapper for Chart.js
- Event handlers are debounced for better performance, especially for hover events

## Styling
The chart container has the following default styles:
- 100% width and height
- Flex display

You can customize the chart appearance through:
- The Chart.js options in the `options` prop
- CSS customization of the `.base-chart` container

## Related Components
- None specifically, but can be used within BaseCard or other container components for better presentation
