---
description: Group component for managing multiple related checkboxes
globs: components/base/BaseCheckboxGroup.vue
alwaysApply: false
---
# BaseCheckboxGroup Component

## Description
Group component for managing multiple related checkboxes with selection state management, layout options, and validation features. BaseCheckboxGroup allows for horizontal or vertical arrangement and provides min/max selection constraints.

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| modelValue | Array/null | undefined | Selected values array (for v-model binding) |
| value | Array/null | undefined | Selected values array (alternative to modelValue) |
| defaultValue | Array | null | Default selected values when uncontrolled |
| disabled | Boolean | false | Whether all checkboxes in the group are disabled |
| vertical | Boolean | false | Whether to arrange checkboxes vertically |
| max | Number | undefined | Maximum number of checkboxes that can be selected |
| min | Number | undefined | Minimum number of checkboxes that must be selected |
| columnGap | String | undefined | Gap between columns (CSS value) |
| rowGap | String | undefined | Gap between rows (CSS value) |
| themeOverrides | Object | {} | Custom theme overrides for styling |

## Events

| Event | Parameters | Description |
|-------|------------|-------------|
| update:modelValue | value | Emitted when the selection changes (for v-model) |
| update | value, event | Emitted when the selection changes, with additional event information |

## Slots

| Slot | Description |
|------|-------------|
| default | Container for BaseCheckbox components |

## Usage Examples

### Basic Usage
```vue
<template>
  <BaseCheckboxGroup v-model="selectedFruits">
    <BaseCheckbox value="apple">Apple</BaseCheckbox>
    <BaseCheckbox value="banana">Banana</BaseCheckbox>
    <BaseCheckbox value="orange">Orange</BaseCheckbox>
  </BaseCheckboxGroup>
</template>

<script setup>
import { ref } from 'vue';

const selectedFruits = ref(['apple']);
</script>
```

### Vertical Layout with Spacing
```vue
<template>
  <BaseCheckboxGroup
    v-model="selectedOptions"
    vertical
    rowGap="16px"
  >
    <BaseCheckbox value="option1">Option 1</BaseCheckbox>
    <BaseCheckbox value="option2">Option 2</BaseCheckbox>
    <BaseCheckbox value="option3">Option 3</BaseCheckbox>
  </BaseCheckboxGroup>
</template>

<script setup>
import { ref } from 'vue';

const selectedOptions = ref([]);
</script>
```

### With Min/Max Selection Limits
```vue
<template>
  <div>
    <p>Please select between 1 and 2 toppings:</p>
    <BaseCheckboxGroup
      v-model="selectedToppings"
      :min="1"
      :max="2"
      @update="handleUpdate"
    >
      <BaseCheckbox value="cheese">Extra Cheese</BaseCheckbox>
      <BaseCheckbox value="pepperoni">Pepperoni</BaseCheckbox>
      <BaseCheckbox value="mushrooms">Mushrooms</BaseCheckbox>
      <BaseCheckbox value="olives">Olives</BaseCheckbox>
    </BaseCheckboxGroup>
  </div>
</template>

<script setup>
import { ref } from 'vue';

const selectedToppings = ref([]);

const handleUpdate = (values) => {
  console.log('Selected toppings:', values);
};
</script>
```

### Disabled Group
```vue
<template>
  <BaseCheckboxGroup
    v-model="selectedColors"
    disabled
  >
    <BaseCheckbox value="red">Red</BaseCheckbox>
    <BaseCheckbox value="green">Green</BaseCheckbox>
    <BaseCheckbox value="blue">Blue</BaseCheckbox>
  </BaseCheckboxGroup>
</template>

<script setup>
import { ref } from 'vue';

const selectedColors = ref(['blue']);
</script>
```

### With Custom Spacing and Styling
```vue
<template>
  <BaseCheckboxGroup
    v-model="selectedSizes"
    columnGap="32px"
    :theme-overrides="{
      itemMarginRight: '0px',
      itemMarginBottom: '0px'
    }"
  >
    <BaseCheckbox value="s">Small</BaseCheckbox>
    <BaseCheckbox value="m">Medium</BaseCheckbox>
    <BaseCheckbox value="l">Large</BaseCheckbox>
    <BaseCheckbox value="xl">Extra Large</BaseCheckbox>
  </BaseCheckboxGroup>
</template>

<script setup>
import { ref } from 'vue';

const selectedSizes = ref([]);
</script>
```

## Component Behavior Notes
- The component provides state management for a group of related BaseCheckbox components
- When `max` is set, additional checkboxes become disabled once the maximum is reached
- When `min` is set, selected checkboxes become disabled if removing them would violate the minimum
- The group can integrate with parent form components for validation and disabled state
- The `modelValue` or `value` props should be arrays containing the values of selected checkboxes
- The component provides the disabled state to child checkboxes via provide/inject

## Styling
- The component applies the `display-vertical` class when the `vertical` prop is true
- Row and column gaps can be controlled with the `rowGap` and `columnGap` props
- Additional styling can be applied through the `themeOverrides` prop

## Related Components
- BaseCheckbox - Individual checkbox component used within groups
- BaseForm - Form component that can contain checkbox groups
- BaseWrapper - Provides base functionality for UI components
