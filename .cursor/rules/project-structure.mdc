---
description: Project structure and file organization guidelines
globs: 
alwaysApply: false
---
# Project Structure

## Main Structure

- We use Turborepo with pnpm workspaces  
- Main Nuxt app lives at the project root (`/`)  
- Packages are in the `packages` folder  
- Server utilities and composables are in the `server/` and `composables/` directories  

```tree
.
├── pages/              # Page-based routing system (Nuxt 3)
│   ├── index.vue       # Home page
│   ├── automation/     # AI assistant feature
│   ├── reply-zero/     # Reply Zero feature
│   ├── settings/       # User settings
│   ├── setup/          # Main onboarding
│   ├── clean/          # Bulk email cleanup
│   ├── smart-categories/ # Smart sender categorization
│   ├── bulk-unsubscribe/ # Bulk unsubscribe
│   ├── stats/          # Email analytics
│   ├── mail/           # Email client (in beta)
│   └── ... (other pages)
├── components/         # Vue components
│   ├── ui/             # Shadcn-style shared components
│   └── ...             # Other reusable components
├── composables/        # Vue composables (replaces React hooks)
│   ├── useAuth.ts      # Auth composable
│   ├── useUser.ts      # User data composable
│   └── ...             # Other global composables
├── server/             # API routes and server logic
│   ├── api/            # Server API endpoints
│   │   ├── knowledge.ts
│   │   ├── reply-tracker.ts
│   │   ├── clean.ts
│   │   ├── ai.ts
│   │   ├── user.ts
│   │   ├── google.ts
│   │   └── auth.ts
│   └── utils/          # Server-side utility functions
├── assets/             # Static assets (images, fonts)
├── public/             # Publicly available static files
├── plugins/            # Nuxt plugins
├── layouts/            # Shared layouts for routes
├── middleware/         # Route guards and middleware
├── app.vue             # Root Vue component
├── nuxt.config.ts      # Nuxt configuration
├── types/              # Global TypeScript types
├── tests/              # Vitest test files
├── scripts/            # Development or automation scripts
├── packages/
│   ├── tinybird/
│   ├── eslint-config/
│   ├── loops/
│   ├── resend/
│   ├── tinybird-ai-analytics/
│   └── tsconfig/
├── package.json
└── ... (other config files)
```


## File Naming and Organization

- Use kebab-case for folders and file names in `pages/`
- Use kebab case for route directories (e.g., `api/hello-world/route`)
- Use PascalCase for components (e.g. `components/Button.vue`)
- Shadcn-style components go in `components/ui`
- Place reusable logic in `composables/`
- All other components are in `components/`
- Colocate files in the folder where they're used unless they can be used across the app
- If a component can be used in many places, place it in the `components` folder
- Only global utilities belong in `server/utils` or composables


## New Pages

- Create new pages in the `pages/` directory as `.vue` files
- Use `<script setup>` and TypeScript by default
- For dynamic routes, use `[param].vue` syntax
- Use Nuxt's built-in `definePageMeta` and `useRoute()` for page-specific logic
- Use `defineNuxtRouteMiddleware()` for middleware
- `asyncData()` or `useAsyncData()` should be used for server-side fetching

## Composables and Server Utilities

- Define reusable logic in `composables/` with useXyz naming convention
- Create server utilities (e.g., mail, Redis, analytics) in `server/utils`
- Use `$fetch` or `useFetch()` for client-side requests to Nuxt APIs
- Leverage Redis and Drizzle inside `server/api/` for secure access

## Testing and Analytics

- Test files go in the `tests/` directory and use `*.test.ts` or `*.spec.ts` naming
- Use PostHog via plugin or server composable and track client interactions carefully
- Do not track PII—obfuscate or anonymize user events

## Email, Docs, and Observability

- Use `server/api/resend.ts` to manage outbound email using Resend
- Documentation should be maintained via Mintlify (`docs/`)
- Observe app metrics with PostHog and log performance data from Nuxt server APIs


## Utility Functions

- Create utility functions in `utils/` folder for reusable logic
- Use lodash utilities for common operations (arrays, objects, strings)
- Import specific lodash functions to minimize bundle size:
  ```ts
  import groupBy from "lodash/groupBy";
  ```
