# PWA (Progressive Web App)
---
description: Guidelines for setting up, using, and maintaining Progressive Web App (PWA) features in Nuxt applications using @vite-pwa/nuxt, with integration notes for Capacitor.
glob: "**/nuxt.config.{ts,js}|**/vite.config.{ts,js}|**/pwa.config.{ts,js,json}|**/manifest.webmanifest|**/service-worker.{js,ts}|**/registerSW.{js,ts}"
---

## Overview

> **Note:** For Nuxt 3 projects, always use the official `@vite-pwa/nuxt` module for PWA support. Do **not** use `vite-plugin-pwa` directly in Nuxt 3 projects. The `@vite-pwa/nuxt` module provides seamless integration and a top-level `pwa` config key in `nuxt.config.ts`.

A Progressive Web App (PWA) delivers a native app-like experience on the web, including offline support, installability, and enhanced performance. In our Nuxt projects, PWA features are implemented using `@vite-pwa/nuxt`, and are designed to work seamlessly with Capacitor for unified web/mobile deployment.

**See also:** @Capacitor Rule for native integration and shared configuration.

## PWA Setup in Nuxt 3 (with @vite-pwa/nuxt)

1. **Install @vite-pwa/nuxt:**
   ```bash
   pnpm add @vite-pwa/nuxt
   # or
   npm install @vite-pwa/nuxt
   # or
   yarn add @vite-pwa/nuxt
   ```

2. **Configure @vite-pwa/nuxt in `nuxt.config.ts`:**
   ```ts
   export default defineNuxtConfig({
     modules: [
       '@vite-pwa/nuxt',
       // ...other modules
     ],
     pwa: {
       registerType: 'autoUpdate',
       manifest: {
         name: 'Your App Name',
         short_name: 'App',
         description: 'Your app description',
         lang: 'en',
         display: 'standalone',
         background_color: '#ffffff',
         theme_color: '#317EFB',
         start_url: '/',
         icons: [
           {
             src: '/icon-192x192.png',
             sizes: '192x192',
             type: 'image/png',
           },
           {
             src: '/icon-512x512.png',
             sizes: '512x512',
             type: 'image/png',
           },
         ],
       },
       workbox: {
         cleanupOutdatedCaches: true,
         runtimeCaching: [
           {
             urlPattern: /^https:\/\/your-api\.domain\//,
             handler: 'NetworkFirst',
             options: {
               cacheName: 'api-cache',
               expiration: { maxEntries: 50, maxAgeSeconds: 86400 },
             },
           },
         ],
       },
       devOptions: {
         enabled: true,
       },
     },
   })
   ```

3. **Add icons and manifest:**
   - Place PWA icons in the `public/` directory.
   - The manifest will be auto-generated by the module, but you can override it with a custom `public/manifest.webmanifest` if needed.

4. **Service Worker:**
   - `@vite-pwa/nuxt` auto-generates a service worker for offline support and caching.
   - For advanced use, add a custom `service-worker.ts` or `service-worker.js` in the project root and reference it in the module config.

5. **Capacitor Integration:**
   - Ensure your PWA build output matches the `webDir` in `capacitor.config.ts` (see @Capacitor Rule).
   - PWA meta tags and manifest should be compatible with native wrappers.
   - Use platform detection (see `usePlatform` composable in Capacitor rule) to adjust features for web vs. native.

## Best Practices

- **Manifest:**
  - Keep `name`, `short_name`, and `description` concise and relevant.
  - Use at least 192x192 and 512x512 icons for installability.
  - Set `display: 'standalone'` for app-like experience.

- **Service Worker:**
  - Cache essential assets and API responses for offline use.
  - Use Workbox strategies for runtime caching.
  - Update service worker logic to handle new releases (prompt user to refresh).

- **Meta Tags:**
  - Add `theme-color`, `apple-mobile-web-app-capable`, and `apple-mobile-web-app-status-bar-style` for better mobile UX.
  - Use `viewport-fit=cover` for full-screen on iOS.

- **Offline UX:**
  - Show a custom offline page or notification when the user is offline.
  - Test offline mode regularly.

- **Install Prompt:**
  - Listen for the `beforeinstallprompt` event to show a custom install banner.
  - Encourage users to install the app for a better experience.

- **Testing:**
  - Test PWA features in Chrome DevTools (Lighthouse, Application tab).
  - Test on real devices for installability and offline support.
  - Use `npx cap sync` and run on device/emulator to test native + PWA integration.

## Usage

- To enable/disable PWA features, update the `@vite-pwa/nuxt` config in `nuxt.config.ts`.
- For custom service worker logic, extend the default with your own file and reference it in the module config.
- Use composables for platform detection and feature toggling (see Capacitor rule).
- Reference the @Capacitor Rule for unified build and deployment steps.

## Web-Only Plugin Compatibility

- Some plugins or features may only be available on native platforms. Always check plugin documentation for web support.
- Use platform detection to provide fallbacks or alternative UX for web/PWA users.

## Further Reading

- @Capacitor Official Documentation
- @@vite-pwa/nuxt Official Guide
- @Web.dev PWA Checklist

For advanced configuration and troubleshooting, see the @@vite-pwa/nuxt official guide.
