---
description: 
globs: 
alwaysApply: false
---
# Capacitor Geolocation Plugin
---
description: Guide for using the Capacitor Geolocation plugin to access device location
glob: "**/*{geolocation,location}*.{ts,js,vue}"
---

## Overview

The Geolocation plugin provides access to the device's location information, including current position, heading, and speed.

## Installation

```bash
npm install @capacitor/geolocation
npx cap sync
```

## iOS Configuration

Add usage description to `Info.plist`:

```xml
<!-- In ios/App/App/Info.plist -->
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need access to your location for navigation features.</string>

<!-- If you need background location updates -->
<key>NSLocationAlwaysUsageDescription</key>
<string>We need access to your location in the background for navigation features.</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>We need access to your location for navigation features.</string>
```

## Android Configuration

Add the following permissions to your `AndroidManifest.xml`:

```xml
<!-- In android/app/src/main/AndroidManifest.xml -->
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

<!-- If you need background location (API level >= 29) -->
<uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
```

## Basic Usage

### Getting Current Position

```typescript
import { Geolocation } from '@capacitor/geolocation';

async function getCurrentLocation() {
  try {
    // Request location permission first
    const permissionStatus = await Geolocation.checkPermissions();
    
    if (permissionStatus.location !== 'granted') {
      const requestResult = await Geolocation.requestPermissions();
      if (requestResult.location !== 'granted') {
        throw new Error('Location permission denied');
      }
    }
    
    // Get current position
    const position = await Geolocation.getCurrentPosition({
      enableHighAccuracy: true, // Use GPS if available
      timeout: 10000, // Timeout after 10 seconds
      maximumAge: 5000 // Accept positions no older than 5 seconds
    });
    
    // Extract data from position
    const { latitude, longitude, accuracy } = position.coords;
    
    return { latitude, longitude, accuracy };
  } catch (error) {
    console.error('Geolocation error:', error);
    throw error;
  }
}
```

### Using in a Vue Component

```vue
<template>
  <div>
    <button @click="getLocation" :disabled="loading">
      {{ loading ? 'Getting location...' : 'Get Current Location' }}
    </button>
    
    <div v-if="error" class="error">
      {{ error }}
    </div>
    
    <div v-if="location" class="location-info">
      <p>Latitude: {{ location.latitude }}</p>
      <p>Longitude: {{ location.longitude }}</p>
      <p>Accuracy: {{ location.accuracy }} meters</p>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { Geolocation } from '@capacitor/geolocation';

const location = ref(null);
const loading = ref(false);
const error = ref(null);

async function getLocation() {
  loading.value = true;
  error.value = null;
  
  try {
    const position = await Geolocation.getCurrentPosition({
      enableHighAccuracy: true
    });
    
    location.value = {
      latitude: position.coords.latitude,
      longitude: position.coords.longitude,
      accuracy: position.coords.accuracy,
      timestamp: position.timestamp
    };
  } catch (err) {
    error.value = err.message || 'Failed to get location';
    console.error('Geolocation error:', err);
  } finally {
    loading.value = false;
  }
}
</script>
```

## Advanced Features

### Watching Location Updates

```typescript
import { Geolocation } from '@capacitor/geolocation';

// Store the watch ID to clear it later
let watchId = null;

// Start watching position
async function startLocationTracking(callback) {
  try {
    // Request permission if needed
    const permissionStatus = await Geolocation.checkPermissions();
    if (permissionStatus.location !== 'granted') {
      const requestResult = await Geolocation.requestPermissions();
      if (requestResult.location !== 'granted') {
        throw new Error('Location permission denied');
      }
    }
    
    // Start watching position
    watchId = await Geolocation.watchPosition({
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 3000
    }, (position, err) => {
      if (err) {
        console.error('Watch position error:', err);
        return;
      }
      
      const { latitude, longitude, accuracy, speed, heading } = position.coords;
      callback({
        latitude,
        longitude, 
        accuracy,
        speed,
        heading,
        timestamp: position.timestamp
      });
    });
    
    return watchId;
  } catch (error) {
    console.error('Start tracking error:', error);
    throw error;
  }
}

// Stop watching position
async function stopLocationTracking() {
  if (watchId !== null) {
    await Geolocation.clearWatch({ id: watchId });
    watchId = null;
    return true;
  }
  return false;
}
```

### Background Location Tracking (Android)

For Android, configure background location in `MainActivity.java`:

```java
// android/app/src/main/java/your/app/package/MainActivity.java
package your.app.package;

import android.os.Bundle;
import com.getcapacitor.BridgeActivity;

public class MainActivity extends BridgeActivity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    
    // Enable background location tracking
    registerPlugin(
      com.capacitorjs.plugins.geolocation.GeolocationPlugin.class,
      "Geolocation"
    );
  }
}
```

### Distance Calculation

Add a utility function to calculate distance between coordinates:

```typescript
// utils/geolocation.ts

/**
 * Calculate distance between two coordinates in kilometers
 * using the Haversine formula
 */
export function calculateDistance(
  lat1: number, 
  lon1: number, 
  lat2: number, 
  lon2: number
): number {
  const R = 6371; // Earth's radius in kilometers
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c; // Distance in kilometers
  
  return distance;
}
```

## Creating a Reusable Composable

```typescript
// composables/useGeolocation.ts
import { ref, onUnmounted } from 'vue';
import { Geolocation } from '@capacitor/geolocation';

export function useGeolocation() {
  const location = ref(null);
  const error = ref(null);
  const loading = ref(false);
  const watching = ref(false);
  let watchId = null;
  
  // Get current position
  async function getCurrentPosition(options = {}) {
    loading.value = true;
    error.value = null;
    
    try {
      const position = await Geolocation.getCurrentPosition({
        enableHighAccuracy: true,
        ...options
      });
      
      location.value = {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        accuracy: position.coords.accuracy,
        altitude: position.coords.altitude,
        altitudeAccuracy: position.coords.altitudeAccuracy,
        heading: position.coords.heading,
        speed: position.coords.speed,
        timestamp: position.timestamp
      };
      
      return location.value;
    } catch (err) {
      error.value = err.message || 'Failed to get location';
      console.error('Geolocation error:', err);
      return null;
    } finally {
      loading.value = false;
    }
  }
  
  // Watch position
  async function startWatchingPosition(options = {}) {
    if (watching.value) {
      return;
    }
    
    error.value = null;
    
    try {
      watchId = await Geolocation.watchPosition({
        enableHighAccuracy: true,
        ...options
      }, (position, err) => {
        if (err) {
          error.value = err.message;
          return;
        }
        
        location.value = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy,
          altitude: position.coords.altitude,
          altitudeAccuracy: position.coords.altitudeAccuracy,
          heading: position.coords.heading,
          speed: position.coords.speed,
          timestamp: position.timestamp
        };
      });
      
      watching.value = true;
    } catch (err) {
      error.value = err.message || 'Failed to watch location';
      console.error('Watch position error:', err);
    }
  }
  
  // Stop watching position
  async function stopWatchingPosition() {
    if (watchId !== null) {
      await Geolocation.clearWatch({ id: watchId });
      watchId = null;
      watching.value = false;
      return true;
    }
    return false;
  }
  
  // Check permissions
  async function checkPermissions() {
    return Geolocation.checkPermissions();
  }
  
  // Request permissions
  async function requestPermissions() {
    return Geolocation.requestPermissions();
  }
  
  // Clean up on component unmount
  onUnmounted(() => {
    if (watchId !== null) {
      Geolocation.clearWatch({ id: watchId }).catch(console.error);
    }
  });
  
  return {
    location,
    error,
    loading,
    watching,
    getCurrentPosition,
    startWatchingPosition,
    stopWatchingPosition,
    checkPermissions,
    requestPermissions
  };
}
```

## Error Handling

Common errors and how to handle them:

```typescript
import { Geolocation } from '@capacitor/geolocation';

async function getLocationWithErrorHandling() {
  try {
    const position = await Geolocation.getCurrentPosition();
    return position;
  } catch (error) {
    // Error cases with user-friendly messages
    if (error.message.includes('denied') || 
        error.message.includes('permission')) {
      // Permission error
      console.error('Location permission denied:', error);
      return { 
        error: 'permission',
        message: 'Location permission is required for this feature.',
        userAction: 'Please enable location access in your device settings.'
      };
    } else if (error.message.includes('timeout')) {
      // Timeout error
      console.error('Location request timed out:', error);
      return { 
        error: 'timeout',
        message: 'Unable to get your location in time.',
        userAction: 'Please try again or check that your GPS is enabled.'
      };
    } else if (error.message.includes('unavailable') || 
               error.message.includes('disabled')) {
      // Location service unavailable
      console.error('Location service unavailable:', error);
      return { 
        error: 'unavailable',
        message: 'Location services are disabled or unavailable.',
        userAction: 'Please enable location services in your device settings.'
      };
    } else {
      // Unknown error
      console.error('Unexpected location error:', error);
      return { 
        error: 'unknown',
        message: 'An unexpected error occurred while trying to get your location.',
        userAction: 'Please try again later.'
      };
    }
  }
}
```

## Best Practices

1. **Permission Handling**
   - Always check and request permissions before accessing location
   - Provide clear explanations about why you need location access
   - Handle permission denial gracefully with alternative flows

2. **Power Efficiency**
   - Use `enableHighAccuracy` only when necessary (consumes more battery)
   - Choose appropriate `timeout` and `maximumAge` values
   - Stop watching location when no longer needed

3. **User Experience**
   - Show loading indicators when requesting location
   - Provide meaningful error messages for location failures
   - Consider the accuracy of location data for your use case

4. **Privacy Considerations**
   - Only collect location data when necessary
   - Be transparent about how location data is used
   - Allow users to opt out of location tracking

5. **Background Location**
   - Only use background location if absolutely necessary
   - Clearly communicate why background location is needed
   - Implement proper battery optimization strategies
