# Installation & Setup

## Prerequisites
- Vue 3
- Pinia
# Installation & Setup

## Prerequisites
- Vue 3
- Pinia
# @dtolk/core-mfe - Remote MFE Usage & Setup

## Consuming as a Remote Micro-Frontend (MFE)

This MFE exposes its components (LoginPage, LoginForm, Notification) and composables (useAuth, useMultitenancy, etc.) via @Module Federation using `@originjs/vite-plugin-federation`.

> **Important:**
> Do **not** install `@dtolk/core-mfe` as an npm package when consuming as a remote. Use module federation and remote imports only.

---

### 1. Install Required Package

```sh
npm install @originjs/vite-plugin-federation
```

---

### 2. Example Vite Configuration (Host App)

Add the federation plugin and configure the remote:

```ts
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import federation from '@originjs/vite-plugin-federation'

export default defineConfig({
  plugins: [
    vue(),
    federation({
      name: 'shellApp',
      remotes: {
        coreMFE: 'https://core-mfe-prd.digitaltolk.net/assets/remoteEntry.js?v=1.0.0' // update with actual URL/version
      },
      shared: ['vue', 'pinia', 'vue-i18n']
    })
  ]
})
```

---

### 3. Example Nuxt Configuration (Nuxt 3, Vite-based)

Install the federation plugin and add it to your Nuxt config:

```sh
npm install @originjs/vite-plugin-federation
```

```ts
// nuxt.config.ts
import { defineNuxtConfig } from 'nuxt/config'
import federation from '@originjs/vite-plugin-federation'

export default defineNuxtConfig({
  vite: {
    plugins: [
      federation({
        name: 'shellApp',
        remotes: {
          coreMFE: 'https://core-mfe-prd.digitaltolk.net/assets/remoteEntry.js?v=1.0.0' // update with actual URL/version
        },
        shared: ['vue', 'pinia', 'vue-i18n']
      })
    ]
  }
})
```

---

### 4. Nuxt Plugin Setup for coreMFE Configuration

You **must** set up a Nuxt plugin to configure coreMFE (auth, tenant, verbiage, etc.):

```ts
// plugins/coreMFE-init.ts
import { defineNuxtPlugin } from '#app'
import { useAuth, useAuthConfig, useTenantConfig, useVerbiageConfig, useVerbiage } from 'coreMFE/index'

export default defineNuxtPlugin((nuxtApp) => {
  const config = useRuntimeConfig()
  useAuthConfig().setConfig({
    baseURL: config.public.AUTH_BASE,
    loginEndpoint: '/api/v1/oauth/token',
    authorizedRoles: [4],
  })
  useTenantConfig().setConfig({
    baseURL: config.public.CONFIG_BASE,
    defaultTenantUUID: config.public.TENANT_ID,
    isProductionEnv: false
  })
  useVerbiageConfig().setConfig({
    baseURL: config.public.VERBIAGE_BASE,
    tag: 'dt-auth-admin',
    i18nConfig: {
      locale: 'en',
      fallbackLocale: ['en', 'se'],
      missingWarn: false
    }
  })
  useAuth().initializeAuth()
  nuxtApp.vueApp.use(useVerbiage().setupI18n())
})
```

---

### 5. Import and Use Remote Components/Composables

#### Async Component Loading (Recommended)

```vue
<script setup>
import { defineAsyncComponent } from 'vue'
const LoginPage = defineAsyncComponent(() => import('coreMFE/LoginPage'))
const LoginForm = defineAsyncComponent(() => import('coreMFE/LoginForm'))
</script>
```

#### Using Composables in Nuxt 3

```ts
import { useAuth, useMultitenancy, useVerbiage } from 'coreMFE/index'

const { isAuthenticated } = useAuth()
const { loadTenant, appTenant } = useMultitenancy()
const { initVerbiage } = useVerbiage()
```

#### Dynamic Import (Advanced/JS only)

```js
const { useAuth } = await import('coreMFE/index');
```

---

## Peer Dependencies

Add these to your `package.json` if not already present:

```json
"peerDependencies": {
  "@dtolk/digitaltolk-ui": "^0.3.85",
  "pinia": "^2.0.0",
  "vue": "^3.0.0",
  "vue-i18n": "^10.0.4"
}
```

---

## Build (for local development)

To build the MFE locally:

```sh
npm install
npm run build
```

---

## Notes
- The remote entry URL may differ for staging/preview environments.
- Ensure your host app shares compatible `vue`, `pinia`, and `vue-i18n` versions with the MFE.
- **Do not install `@dtolk/core-mfe` as an npm package when consuming as a remote.**
- See also: usage.mdc, components.mdc, composables.mdc
