---
description:
globs:
alwaysApply: false
---
# BaseCard Component

## Description
BaseCard is a versatile container component that provides a structured way to display content with optional header, footer, and action areas. It supports various sizes, styling options, and can be made closable for interactive interfaces.

## Props

### Core Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| title | string | - | Card title text |
| size | 'small' \| 'medium' \| 'large' \| 'huge' | 'medium' | The size of the card |
| closable | boolean | false | Whether the card displays a close button |
| bordered | boolean | true | Whether the card has a border |

### Appearance Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| contentClass | string | - | CSS class for the card content area |
| contentStyle | object | - | Inline style for the card content area |
| headerClass | string | - | CSS class for the card header area |
| headerStyle | object | - | Inline style for the card header area |
| headerExtraClass | string | - | CSS class for the card header extra area |
| headerExtraStyle | object | - | Inline style for the card header extra area |
| footerClass | string | - | CSS class for the card footer area |
| footerStyle | object | - | Inline style for the card footer area |
| themeOverrides | object | - | Custom theme overrides for the component |

### Advanced Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| hoverable | boolean | false | Whether the card has hover state effects |
| embedded | boolean | false | Whether the card has a recessed appearance |
| segmented | boolean \| object | false | Whether to divide sections with borders (for header, footer or both) |
| tag | string | 'div' | HTML tag to render the card as |

## Slots

| Slot | Description |
|------|-------------|
| default | Main card content area |
| header | Custom header content, replaces the default title |
| header-extra | Content for the right side of the header area |
| cover | Content for a cover/banner area at the top of the card |
| footer | Content for the footer area |
| action | Content for an action area below the main content |

## Events

| Event | Parameters | Description |
|-------|------------|-------------|
| close | - | Emitted when the close button is clicked |

## Examples

### Basic Usage
```vue
<template>
  <BaseCard title="My Card">
    <p>This is the main content of the card.</p>
  </BaseCard>
</template>

<script setup>
import { BaseCard } from '@digitaltolk/ui';
</script>
```

### With All Sections
```vue
<template>
  <BaseCard title="User Profile">
    <template #cover>
      <img src="/banner.jpg" alt="User banner" />
    </template>
    
    <template #header-extra>
      <BaseButton size="small">Edit</BaseButton>
    </template>
    
    <div class="card-content">
      <h3>John Doe</h3>
      <p>Software Developer</p>
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
    
    <template #footer>
      <div class="stats">
        <div>Projects: 12</div>
        <div>Following: 48</div>
        <div>Followers: 86</div>
      </div>
    </template>
    
    <template #action>
      <div class="action-buttons">
        <BaseButton>View Details</BaseButton>
        <BaseButton type="text">Message</BaseButton>
      </div>
    </template>
  </BaseCard>
</template>

<script setup>
import { BaseCard, BaseButton } from '@digitaltolk/ui';
</script>
```

### Closable Card
```vue
<template>
  <BaseCard 
    title="Notification" 
    closable 
    @close="handleClose"
  >
    <p>You have a new message.</p>
  </BaseCard>
</template>

<script setup>
import { BaseCard } from '@digitaltolk/ui';
import { useToast } from '@/composables/useToast';

const toast = useToast();

const handleClose = () => {
  toast.info('Card closed');
};
</script>
```

### Custom Sized Cards
```vue
<template>
  <div class="cards-container">
    <BaseCard title="Small Card" size="small">
      <p>A small card with minimal content.</p>
    </BaseCard>
    
    <BaseCard title="Medium Card" size="medium">
      <p>A medium-sized card with standard content.</p>
    </BaseCard>
    
    <BaseCard title="Large Card" size="large">
      <p>A large card with more space for content.</p>
      <p>Additional paragraph to show the space.</p>
    </BaseCard>
    
    <BaseCard title="Huge Card" size="huge">
      <p>A huge card with maximum space for content.</p>
      <p>Multiple paragraphs can be added here.</p>
      <p>Great for displaying detailed information.</p>
    </BaseCard>
  </div>
</template>

<script setup>
import { BaseCard } from '@digitaltolk/ui';
</script>

<style scoped>
.cards-container {
  display: flex;
  flex-direction: column;
  gap: 16px;
}
</style>
```

### Card with Custom Styling
```vue
<template>
  <BaseCard
    title="Custom Styled Card"
    :headerStyle="{ backgroundColor: '#f0f9ff' }"
    :contentStyle="{ padding: '20px' }"
    :footerStyle="{ backgroundColor: '#f0f9ff', textAlign: 'right' }"
    headerClass="custom-header"
    contentClass="custom-content"
    footerClass="custom-footer"
  >
    <p>Card with custom styling applied to different sections.</p>
    
    <template #footer>
      <BaseButton type="primary">Submit</BaseButton>
    </template>
  </BaseCard>
</template>

<script setup>
import { BaseCard, BaseButton } from '@digitaltolk/ui';
</script>

<style scoped>
.custom-header {
  border-bottom: 2px solid #e0f2fe;
}

.custom-content {
  min-height: 100px;
}

.custom-footer {
  padding: 12px 20px;
}
</style>
```

### Card Grid Layout
```vue
<template>
  <div class="card-grid">
    <BaseCard 
      v-for="item in items" 
      :key="item.id"
      :title="item.title"
      hoverable
    >
      <p>{{ item.description }}</p>
      
      <template #footer>
        <div class="card-footer">
          <span>{{ item.date }}</span>
          <BaseButton size="small">View</BaseButton>
        </div>
      </template>
    </BaseCard>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { BaseCard, BaseButton } from '@digitaltolk/ui';

const items = ref([
  { id: 1, title: 'Project Alpha', description: 'Description for Project Alpha', date: '2023-04-15' },
  { id: 2, title: 'Project Beta', description: 'Description for Project Beta', date: '2023-05-22' },
  { id: 3, title: 'Project Gamma', description: 'Description for Project Gamma', date: '2023-06-10' },
  { id: 4, title: 'Project Delta', description: 'Description for Project Delta', date: '2023-07-05' }
]);
</script>

<style scoped>
.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 16px;
}

.card-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
</style>
```

## Best Practices

1. **Content Organization**
   - Use the header slot for titles and primary actions
   - Place secondary actions in the footer or action slots
   - Group related content together within the main content area
   - Use the cover slot for images or banners that span the full width

2. **Visual Hierarchy**
   - Maintain consistent card sizes within the same view
   - Use appropriate whitespace in content areas
   - Apply visual emphasis to important information
   - Consider using the segmented prop to visually separate content areas

3. **Interaction Design**
   - Add the hoverable prop for interactive cards
   - Use the closable prop for dismissible cards
   - Place primary actions in visible, accessible locations
   - Ensure interactive elements have appropriate hover states

4. **Responsive Design**
   - Adjust card grid layouts for different screen sizes
   - Consider how content will reflow on smaller devices
   - Use appropriate sizes for different viewport widths
   - Test card layouts with different content lengths

## Common Patterns

### Information Card
```vue
<template>
  <BaseCard title="Product Information">
    <div class="product-info">
      <img src="/product.jpg" alt="Product" class="product-image" />
      <div class="product-details">
        <h3>{{ product.name }}</h3>
        <p>{{ product.description }}</p>
        <div class="product-meta">
          <span>Price: ${{ product.price }}</span>
          <span>Stock: {{ product.stock }}</span>
        </div>
      </div>
    </div>
    
    <template #footer>
      <div class="product-actions">
        <BaseButton type="primary">Add to Cart</BaseButton>
        <BaseButton>Details</BaseButton>
      </div>
    </template>
  </BaseCard>
</template>
```

### Collapsible Card
```vue
<template>
  <BaseCard>
    <template #header>
      <div @click="toggleCollapse" class="collapsible-header">
        <h3>{{ title }}</h3>
        <BaseIcon>{{ expanded ? 'expand_less' : 'expand_more' }}</BaseIcon>
      </div>
    </template>
    
    <div v-if="expanded" class="collapsible-content">
      <slot></slot>
    </div>
  </BaseCard>
</template>

<script setup>
import { ref } from 'vue';
import { BaseCard, BaseIcon } from '@digitaltolk/ui';

const props = defineProps({
  title: {
    type: String,
    required: true
  }
});

const expanded = ref(false);

const toggleCollapse = () => {
  expanded.value = !expanded.value;
};
</script>
```

### Dashboard Card
```vue
<template>
  <BaseCard
    :title="title"
    size="medium"
    bordered
  >
    <template #header-extra>
      <BaseSelect 
        v-model:value="timeRange" 
        :options="timeRangeOptions" 
        size="small" 
      />
    </template>
    
    <div class="stat-card">
      <div class="stat-value">{{ formattedValue }}</div>
      <div class="stat-change" :class="{ 'positive': isPositive, 'negative': !isPositive }">
        <BaseIcon size="small">{{ isPositive ? 'arrow_upward' : 'arrow_downward' }}</BaseIcon>
        <span>{{ changePercentage }}%</span>
      </div>
    </div>
    
    <div class="chart-container">
      <BaseChart :data="chartData" :options="chartOptions" />
    </div>
  </BaseCard>
</template>
```

## Testing Checklist

- [ ] Card renders correctly with default props
- [ ] All slots render content correctly
- [ ] Card sizes apply appropriate styling
- [ ] Close button appears when closable prop is true
- [ ] Close event fires when close button is clicked
- [ ] Custom styling applies correctly to all sections
- [ ] Segmented prop correctly divides card sections
- [ ] Hoverable prop adds appropriate hover effects
- [ ] Card renders correctly with different content lengths
- [ ] Card appears correctly across different viewport sizes

## Related Components

- BaseCollapse: For creating collapsible accordion-style interfaces
- BaseTable: For displaying structured data in a tabular format
- BaseTabs: For organizing content into tabbed interfaces
- BaseModal: For displaying content in a modal dialog
