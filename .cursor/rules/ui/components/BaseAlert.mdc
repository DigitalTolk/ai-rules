---
description: 
globs: 
alwaysApply: false
---
# BaseAlert Component

## Description
BaseAlert is a component for displaying important messages, notifications, or status information to users. It supports different types for various scenarios (success, warning, error, info), can include icons, headers, and actions, and can be configured to be closable.

## Props

### Core Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| type | 'default' \| 'success' \| 'info' \| 'warning' \| 'error' | 'default' | The type/style of the alert |
| title | string | - | Title text displayed at the top of the alert |
| closable | boolean | false | Whether the alert can be closed by the user |
| showIcon | boolean | false | Whether to display an icon based on the alert type |

### Appearance Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| bordered | boolean | false | Whether to show a border around the alert |
| ghost | boolean | false | Whether to remove the background color and border |
| themeOverrides | object | - | Custom theme overrides for styling the component |

## Slots

| Slot | Description |
|------|-------------|
| default | Main content of the alert |
| header | Custom header content (replaces the title prop if provided) |
| icon | Custom icon content (overrides the default icon based on type) |
| action | Content for the action area, typically containing buttons |

## Events

| Event | Parameters | Description |
|-------|------------|-------------|
| close | - | Emitted when the close button is clicked |
| after-leave | - | Emitted after the alert's leave transition completes |

## Examples

### Basic Alert
```vue
<template>
  <BaseAlert>
    This is a default alert message.
  </BaseAlert>
</template>

<script setup>
import { BaseAlert } from '@digitaltolk/ui';
</script>
```

### Alert Types
```vue
<template>
  <div class="alerts-container">
    <BaseAlert type="default">
      This is a default alert message.
    </BaseAlert>
    
    <BaseAlert type="success">
      Operation completed successfully.
    </BaseAlert>
    
    <BaseAlert type="info">
      Here is some important information.
    </BaseAlert>
    
    <BaseAlert type="warning">
      Warning: This action cannot be undone.
    </BaseAlert>
    
    <BaseAlert type="error">
      An error occurred while processing your request.
    </BaseAlert>
  </div>
</template>

<script setup>
import { BaseAlert } from '@digitaltolk/ui';
</script>

<style scoped>
.alerts-container {
  display: flex;
  flex-direction: column;
  gap: 16px;
}
</style>
```

### With Icons
```vue
<template>
  <div class="alerts-container">
    <BaseAlert type="success" :showIcon="true">
      Your profile has been updated successfully.
    </BaseAlert>
    
    <BaseAlert type="info" :showIcon="true">
      Your session will expire in 5 minutes.
    </BaseAlert>
    
    <BaseAlert type="warning" :showIcon="true">
      Your account is approaching its storage limit.
    </BaseAlert>
    
    <BaseAlert type="error" :showIcon="true">
      Failed to save changes. Please try again.
    </BaseAlert>
  </div>
</template>

<script setup>
import { BaseAlert } from '@digitaltolk/ui';
</script>
```

### With Title
```vue
<template>
  <BaseAlert 
    type="info" 
    title="Account Update Required" 
    :showIcon="true"
  >
    We've updated our terms of service. Please review and accept the new terms to continue using our service.
  </BaseAlert>
</template>

<script setup>
import { BaseAlert } from '@digitaltolk/ui';
</script>
```

### Closable Alert
```vue
<template>
  <div v-if="showAlert">
    <BaseAlert 
      type="success" 
      :closable="true" 
      @close="closeAlert"
      :showIcon="true"
    >
      Your changes have been saved successfully.
    </BaseAlert>
  </div>
  
  <BaseButton v-if="!showAlert" @click="showAlert = true">
    Show Alert
  </BaseButton>
</template>

<script setup>
import { ref } from 'vue';
import { BaseAlert, BaseButton } from '@digitaltolk/ui';

const showAlert = ref(true);

const closeAlert = () => {
  showAlert.value = false;
};
</script>
```

### With Custom Icon
```vue
<template>
  <BaseAlert type="info">
    <template #icon>
      <BaseIcon>tips_and_updates</BaseIcon>
    </template>
    Here's a helpful tip to improve your workflow.
  </BaseAlert>
</template>

<script setup>
import { BaseAlert, BaseIcon } from '@digitaltolk/ui';
</script>
```

### With Action Buttons
```vue
<template>
  <BaseAlert 
    type="warning" 
    title="Delete Confirmation" 
    :showIcon="true"
  >
    Are you sure you want to delete this item? This action cannot be undone.
    
    <template #action>
      <div class="alert-actions">
        <BaseButton type="error" @click="deleteItem">Delete</BaseButton>
        <BaseButton @click="cancelDelete">Cancel</BaseButton>
      </div>
    </template>
  </BaseAlert>
</template>

<script setup>
import { BaseAlert, BaseButton } from '@digitaltolk/ui';

const deleteItem = () => {
  // Delete logic
  console.log('Item deleted');
};

const cancelDelete = () => {
  // Cancel logic
  console.log('Deletion canceled');
};
</script>

<style scoped>
.alert-actions {
  display: flex;
  gap: 8px;
  margin-top: 16px;
}
</style>
```

### Custom Styled Alert
```vue
<template>
  <BaseAlert 
    type="info" 
    :bordered="true"
    :themeOverrides="{ 
      color: '#f0f9ff', 
      borderColor: '#0ea5e9',
      textColor: '#0c4a6e'
    }"
  >
    <template #icon>
      <BaseIcon>info</BaseIcon>
    </template>
    This alert has custom styling applied.
  </BaseAlert>
</template>

<script setup>
import { BaseAlert, BaseIcon } from '@digitaltolk/ui';
</script>
```

## Best Practices

1. **Usage Guidelines**
   - Use alerts to communicate important information, status updates, or required actions
   - Select the appropriate alert type based on the message's severity and purpose
   - Keep alert messages clear, concise, and focused on a single topic
   - Place alerts in context where they are relevant to the user's current task

2. **Content Writing**
   - Write alert messages in a friendly, non-technical tone
   - Clearly explain what happened and what action (if any) the user needs to take
   - For error alerts, avoid blaming the user and focus on solutions
   - Use sentence case for alert content and title text

3. **Design and Appearance**
   - Use icons to reinforce the alert's message type
   - Ensure sufficient contrast between the alert background and text
   - Make action buttons clearly distinguishable and place them in a consistent order
   - Consider making frequently dismissed alerts closable

4. **Accessibility**
   - Ensure alert colors meet WCAG contrast requirements
   - Don't rely solely on color to communicate the alert type
   - Include descriptive text that conveys the same information as icons
   - Use ARIA attributes appropriately for screen readers

## Common Patterns

### Form Validation Alert
```vue
<template>
  <BaseForm @submit.prevent="submitForm">
    <!-- Form fields -->
    
    <BaseAlert 
      v-if="formErrors.length" 
      type="error" 
      :showIcon="true"
      style="margin-bottom: 16px;"
    >
      <div>Please correct the following errors:</div>
      <ul class="error-list">
        <li v-for="(error, index) in formErrors" :key="index">
          {{ error }}
        </li>
      </ul>
    </BaseAlert>
    
    <BaseButton type="primary" submit>Submit</BaseButton>
  </BaseForm>
</template>

<style scoped>
.error-list {
  margin-top: 8px;
  margin-bottom: 0;
  padding-left: 20px;
}
</style>
```

### Status Update Alert
```vue
<template>
  <BaseAlert 
    v-if="status" 
    :type="status.type" 
    :showIcon="true" 
    :closable="true"
    @close="clearStatus"
  >
    {{ status.message }}
  </BaseAlert>
</template>

<script setup>
import { ref } from 'vue';
import { BaseAlert } from '@digitaltolk/ui';

const status = ref({
  type: 'success',
  message: 'Your profile has been updated successfully.'
});

const clearStatus = () => {
  status.value = null;
};
</script>
```

### Banner Alert
```vue
<template>
  <BaseAlert 
    type="warning" 
    :showIcon="true" 
    :bordered="false"
    style="border-radius: 0;"
  >
    <template #header>
      <strong>Service Maintenance Notice</strong>
    </template>
    Our system will be undergoing maintenance on Saturday, June 12 from 2:00 AM to 4:00 AM UTC. Some services may be temporarily unavailable.
  </BaseAlert>
</template>
```

## Related Components

- **BaseToast** - For temporary, non-blocking notifications
- **BaseModal** - For more intrusive messages requiring user action
- **BaseNotification** - For corner-positioned, timed notifications
- **BasePopconfirm** - For confirmation messages with action buttons

## Testing Checklist

- Verify that all alert types display correctly with appropriate colors
- Test that icons appear when showIcon is enabled
- Check that closable alerts have a close button that works correctly
- Verify that the after-leave event fires after closing transitions
- Test that all slots (default, header, icon, action) render content correctly
- Ensure alerts are readable with custom theme overrides
- Check that long content wraps appropriately within the alert
- Verify that the bordered prop applies a border when enabled
