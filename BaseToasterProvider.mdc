---
description: Toast notification component for temporary messages
globs: components/base/BaseToasterProvider.vue
alwaysApply: false
---
# BaseToasterProvider Component

## Description
The BaseToasterProvider component is a wrapper around vue-sonner's Toaster component for displaying temporary toast notifications in your application. It provides a global toast notification system that can be used to show success, error, warning, info, and loading messages.

## Usage
The BaseToasterProvider component should be mounted once at the root of your application. You then use the `useToaster` composable to trigger toast notifications from anywhere in your application.

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| position | String | 'top-right' | Position of toasts. Options: 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', 'bottom-right' |
| theme | String | 'light' | Theme for toasts. Options: 'light', 'dark', 'system' |
| richColors | Boolean | true | Whether to use rich colors for different toast types |
| expand | Boolean | false | Whether toasts expand to fit content |
| visibleToasts | Number | 3 | Maximum number of visible toasts at once |
| closeButton | Boolean | true | Whether to show a close button on toasts |
| offset | String | '32px' | Offset from the edges of the viewport |
| dir | String | 'auto' | Text direction. Options: 'ltr', 'rtl', 'auto' |

## The `useToaster` Composable

### Basic Usage

```js
import { useToaster } from '@digitaltolk/ui';

// Get the toaster instance
const { toaster } = useToaster();

// Show a basic toast
toaster({
  content: 'This is a toast message',
  description: 'This is additional information',
  duration: 3000, // 3 seconds
});
```

### Toast Types

The toaster supports different message types which apply different styling:

```js
// Success toast
toaster.success({
  content: 'Operation successful!',
  description: 'Your changes have been saved',
});

// Error toast
toaster.error({
  content: 'Operation failed',
  description: 'Please try again',
});

// Warning toast
toaster.warning({
  content: 'Caution required',
  description: 'This action has consequences',
});

// Info toast
toaster.info({
  content: 'For your information',
  description: 'Something happened',
});

// Loading toast
toaster.loading({
  content: 'Processing your request',
  description: 'Please wait',
});
```

### Promise-based Toast

The toaster can show different messages based on the promise state:

```js
const saveData = async () => {
  const promise = fetch('/api/data', {
    method: 'POST',
    body: JSON.stringify(data),
  });

  toaster.promise(promise, {
    loading: 'Saving data...',
    success: (data) => `Data saved successfully`,
    error: (err) => `Error: ${err.message}`,
    duration: 3000,
  });
};
```

### Toast Configuration Options

#### Basic Options
| Option | Type | Default | Description |
|--------|------|---------|-------------|
| content | String | '' | Primary content of the toast |
| description | String | undefined | Additional information shown below the content |
| duration | Number | 2500 | Time in milliseconds before the toast disappears |
| id | String | auto-generated | Unique identifier for the toast |

#### Styling Options
| Option | Type | Default | Description |
|--------|------|---------|-------------|
| class | String | 'base-toast' | Class applied to the toast |
| descriptionClass | String | undefined | Class applied to the description |
| style | Object | {} | Custom CSS styles |
| unstyled | Boolean | false | Whether to apply default styling |
| richColors | Boolean | true | Use rich colors for different toast types |
| invert | Boolean | false | Invert the colors of the toast |

#### Behavior Options
| Option | Type | Default | Description |
|--------|------|---------|-------------|
| closeButton | Boolean | false | Whether to show a close button |
| dismissible | Boolean | true | Whether the toast can be dismissed by clicking |
| important | Boolean | false | Whether the toast should stay visible even if there are too many |
| expand | Boolean | false | Whether the toast should expand to fit content |
| visibleToasts | Number | 3 | Maximum number of visible toasts at once |

#### Action Buttons
| Option | Type | Default | Description |
|--------|------|---------|-------------|
| action | Object | undefined | Configuration for the action button |
| actionButtonStyle | Object | undefined | Custom style for the action button |
| cancel | Object | undefined | Configuration for the cancel button |
| cancelButtonStyle | Object | undefined | Custom style for the cancel button |

#### Events
| Option | Type | Default | Description |
|--------|------|---------|-------------|
| onDismiss | Function | undefined | Called when the toast is dismissed |
| onAutoClose | Function | undefined | Called when the toast closes automatically |
| onClose | Function | undefined | Called when the toast closes for any reason |

### Utility Functions

The `useToaster` composable also provides utility functions for managing toasts:

```js
const { toaster, utils } = useToaster();

// Clear all toasts
utils.clearAll();

// Clear a specific toast by ID
utils.clear('toast-id');

// Update a toast's content
utils.update('toast-id', {
  content: 'Updated message',
  description: 'New description',
});

// Update global settings
utils.updateGlobalSettings({
  position: 'bottom-right',
  theme: 'dark',
});
```

### Preset Notifications

The toaster provides some preset notification types for common scenarios:

```js
const { toaster, presets } = useToaster();

// API error notification
presets.apiError('Failed to load data');

// Successful save notification
presets.successfulSave();

// Network error notification
presets.networkError();
```

## Examples

### Basic Setup

```vue
<template>
  <div>
    <App />
    <BaseToasterProvider />
  </div>
</template>

<script setup>
import { BaseToasterProvider } from '@digitaltolk/ui';
</script>
```

### Using Toasts in Components

```vue
<template>
  <div>
    <BaseButton @click="saveData">Save Changes</BaseButton>
    <BaseButton @click="showErrorToast">Show Error</BaseButton>
  </div>
</template>

<script setup>
import { BaseButton, useToaster } from '@digitaltolk/ui';

const { toaster } = useToaster();

function saveData() {
  // Simulate an API call
  const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
      if (Math.random() > 0.3) {
        resolve({ success: true });
      } else {
        reject(new Error('Network error'));
      }
    }, 1000);
  });

  toaster.promise(promise, {
    loading: 'Saving changes...',
    success: 'Changes saved successfully!',
    error: (err) => `Error: ${err.message}`,
  });
}

function showErrorToast() {
  toaster.error({
    content: 'Operation failed',
    description: 'Please check your input and try again',
  });
}
</script>
```

### Custom Toast Configuration

```vue
<template>
  <div>
    <BaseButton @click="showCustomToast">Show Custom Toast</BaseButton>
  </div>
</template>

<script setup>
import { BaseButton, useToaster } from '@digitaltolk/ui';

// Configure global toaster settings
const { toaster } = useToaster({
  position: 'bottom-center',
  theme: 'dark',
  expand: true,
  visibleToasts: 4,
});

function showCustomToast() {
  toaster.info({
    content: 'Custom Toast',
    description: 'This toast has custom settings',
    duration: 5000,
    closeButton: true,
    action: {
      label: 'View',
      onClick: () => {
        console.log('Action clicked');
      },
    },
    cancel: {
      label: 'Dismiss',
      onClick: () => {
        console.log('Dismissed');
      },
    },
  });
}
</script>
```

## Related Components
- BaseAlert - For more permanent notifications that require user interaction
- BasePopover - For contextual information display
