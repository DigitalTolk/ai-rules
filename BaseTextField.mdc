---
description: Text input component with validation support
globs: components/base/BaseTextField.vue
alwaysApply: false
---
# BaseTextField Component

## Description
A versatile text input component supporting various input types, validation, and customization options. BaseTextField is a wrapper around the n-input component, providing enhanced functionality and consistent styling.

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| modelValue | String/Number | "" | The value of the input (v-model binding) |
| allowInput | Boolean | undefined | Whether to allow input |
| autofocus | Boolean | false | Whether to autofocus the input |
| autosize | Boolean/Object | { minRows: 3 } | For textarea, whether to automatically adjust height |
| clearable | Boolean | false | Whether the input can be cleared |
| countGraphemes | Number | undefined | Custom grapheme counter |
| defaultValue | String | null | Default value of the input |
| disabled | Boolean | false | Whether the input is disabled |
| ghost | Boolean | false | Whether to use ghost style without borders |
| inputProps | Object | undefined | Props to pass to the inner input element |
| loading | Boolean | false | Whether to show loading state |
| maxlength | Number | undefined | Maximum input length |
| minlength | Number | undefined | Minimum input length |
| pair | Boolean | false | Whether to show a paired input |
| passivelyActivated | Boolean | false | Whether the input is passively activated |
| placeholder | String | null | Placeholder text |
| readonly | Boolean | false | Whether the input is read-only |
| renderCount | Function | undefined | Custom render function for character count |
| round | Boolean | false | Whether the input has rounded corners |
| rows | Number | 3 | Number of rows for textarea |
| separator | String | undefined | Separator for paired inputs |
| showCount | Boolean | false | Whether to show character count |
| showPasswordOn | String | undefined | When to show password text |
| size | String | "medium" | Size of the input ("tiny", "small", "medium", "large") |
| status | String | undefined | Status of the input ("success", "warning", "error") |
| customValidationMessage | String | undefined | Custom validation message |
| type | String | "text" | Input type ("text", "password", "textarea", "url", "email", "phone") |
| themeOverrides | Object | {} | Custom theme overrides for the component |

## Events

| Event | Parameters | Description |
|-------|------------|-------------|
| update:modelValue | (value) | Triggered when the input value changes |
| blur | () | Triggered when the input loses focus |
| change | (value) | Triggered when the input value is changed and confirmed |
| clear | () | Triggered when the input is cleared |
| input | (value) | Triggered when the input value changes (with each keystroke) |
| focus | () | Triggered when the input gains focus |
| select | (event) | Triggered when text in the input is selected |
| scrollTo | (event) | Triggered when scrolling the input |

## Slots

| Slot | Description |
|------|-------------|
| label | Input label content |
| title-info | Additional information displayed next to the label |
| help-text | Help text displayed below the input |
| clear-icon | Custom clear icon |
| count | Custom character count display |
| password-invisible-icon | Custom icon for hidden password |
| password-visible-icon | Custom icon for visible password |
| prefix | Content displayed before the input |
| suffix | Content displayed after the input |
| separator | Custom separator for paired inputs |

## Validation

The component includes built-in validation for the following input types:
- Email: Validates email format
- URL: Validates URL format
- Phone: Validates phone number format

Validation errors are displayed in the help-text slot by default.

## Usage Examples

### Basic Text Input
```vue
<template>
  <BaseTextField v-model="inputValue" placeholder="Enter text">
    <template #label>Username</template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField } from '@digitaltolk/ui';

const inputValue = ref('');
</script>
```

### Password Input
```vue
<template>
  <BaseTextField 
    v-model="password" 
    type="password" 
    placeholder="Enter password"
    showPasswordOn="click"
  >
    <template #label>Password</template>
    <template #help-text>Password must be at least 8 characters</template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField } from '@digitaltolk/ui';

const password = ref('');
</script>
```

### Textarea with Character Count
```vue
<template>
  <BaseTextField 
    v-model="bio" 
    type="textarea" 
    :maxlength="500" 
    showCount
    :autosize="{ minRows: 3, maxRows: 10 }"
    placeholder="Write about yourself"
  >
    <template #label>Bio</template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField } from '@digitaltolk/ui';

const bio = ref('');
</script>
```

### Email Input with Validation
```vue
<template>
  <BaseTextField 
    v-model="email" 
    type="email" 
    placeholder="user@example.com"
  >
    <template #label>Email Address</template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField } from '@digitaltolk/ui';

const email = ref('');
</script>
```

### Input with Icons
```vue
<template>
  <BaseTextField v-model="search" placeholder="Search...">
    <template #prefix>
      <BaseIcon>search</BaseIcon>
    </template>
    <template #suffix>
      <BaseIcon>filter_list</BaseIcon>
    </template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField, BaseIcon } from '@digitaltolk/ui';

const search = ref('');
</script>
```

### Disabled Input
```vue
<template>
  <BaseTextField 
    v-model="username" 
    disabled
    placeholder="Username is locked"
  >
    <template #label>Username</template>
  </BaseTextField>
</template>
```

### Different Sizes
```vue
<template>
  <BaseSpace vertical>
    <BaseTextField size="small" placeholder="Small input" />
    <BaseTextField size="medium" placeholder="Medium input" />
    <BaseTextField size="large" placeholder="Large input" />
  </BaseSpace>
</template>
```

### Clearable Input
```vue
<template>
  <BaseTextField 
    v-model="query" 
    clearable
    placeholder="Type and clear"
    @clear="handleClear"
  >
    <template #label>Search Query</template>
  </BaseTextField>
</template>

<script setup>
import { ref } from 'vue';
import { BaseTextField } from '@digitaltolk/ui';

const query = ref('');
const handleClear = () => {
  console.log('Input cleared');
};
</script>
```

### Input with Status
```vue
<template>
  <BaseSpace vertical>
    <BaseTextField 
      v-model="success" 
      status="success"
      placeholder="Success input"
    >
      <template #help-text>This input is valid</template>
    </BaseTextField>
    
    <BaseTextField 
      v-model="warning" 
      status="warning"
      placeholder="Warning input"
    >
      <template #help-text>This input has a warning</template>
    </BaseTextField>
    
    <BaseTextField 
      v-model="error" 
      status="error"
      placeholder="Error input"
    >
      <template #help-text>This input has an error</template>
    </BaseTextField>
  </BaseSpace>
</template>
```

## Form Integration

The BaseTextField component integrates with parent form components, inheriting size and disabled state from the form context if available.

## Styling

The component includes custom styling for different sizes and types, with special handling for textarea inputs and ghost style mode. Input prefixes and suffixes are styled consistently and sized proportionally to the input.

## Implementation Details

The BaseTextField component wraps n-input while providing consistent styling in accordance with the DigitalTolk design system. It includes built-in validation for email, URL, and phone inputs, with automatic error messages.

## Related Components
- BaseForm - For form containers
- BaseSelect - For dropdown selection
- BaseCheckbox - For boolean selection
- BaseRadio - For single selection from multiple options
